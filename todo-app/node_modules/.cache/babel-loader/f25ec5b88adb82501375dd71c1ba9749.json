{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EPUFPAU\\\\Desktop\\\\todo-app\\\\src\\\\components\\\\counter\\\\Counter.jsx\";\nimport React, { Component } from 'react';\nimport './Counter.css';\nimport { tsExpressionWithTypeArguments } from '@babel/types';\n\nclass Counter extends Component {\n  // Define the initial state in a constructor\n  // state => counter 0\n  constructor() {\n    super(); // Error 1\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        className: \"counter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.increment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"+1\"), React.createElement(\"span\", {\n        className: \"count\",\n        style: {\n          fontSize: \"50px\",\n          padding: \"50px 50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, this.state.counter), React.createElement(\"span\", {\n        className: \"count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, this.state.secondCounter));\n    };\n\n    this.increment = () => {\n      // Update state\n      // console.log('increment');\n      this.setState({\n        counter: this.state.counter + 1,\n        secondCounter: this.state.secondCounter + 1\n      });\n    };\n\n    this.state = {\n      counter: 0,\n      secondCounter: 100 // Arrow function prevents the need for binding, the binding happend automatically\n      // this.increment = this.increment.bind(this)\n\n    };\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["C:\\Users\\EPUFPAU\\Desktop\\todo-app\\src\\components\\counter\\Counter.jsx"],"names":["React","Component","tsExpressionWithTypeArguments","Counter","constructor","render","increment","fontSize","padding","state","counter","secondCounter","setState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;AACA,SAASC,6BAAT,QAA8C,cAA9C;;AAEA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAE5B;AACA;AAEAG,EAAAA,WAAW,GAAG;AACV,YADU,CACD;;AADC,SAWdC,MAXc,GAWL,MAAM;AACX,aACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,OAAO,EAAE,KAAKC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAM,QAAA,SAAS,EAAC,OAAhB;AACI,QAAA,KAAK,EAAG;AAACC,UAAAA,QAAQ,EAAE,MAAX;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACuD,KAAKC,KAAL,CAAWC,OADlE,CAFJ,EAII;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyB,KAAKD,KAAL,CAAWE,aAApC,CAJJ,CADJ;AASH,KArBa;;AAAA,SAsBdL,SAtBc,GAsBF,MAAM;AAAE;AAChB;AACA,WAAKM,QAAL,CAAc;AACVF,QAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,GAAqB,CADpB;AAEVC,QAAAA,aAAa,EAAE,KAAKF,KAAL,CAAWE,aAAX,GAA2B;AAFhC,OAAd;AAIH,KA5Ba;;AAEV,SAAKF,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,CADA;AAETC,MAAAA,aAAa,EAAE,GAFN,CAKb;AACA;;AANa,KAAb;AAOH;;AAd2B;;AAuChC,eAAeR,OAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport './Counter.css'\r\nimport { tsExpressionWithTypeArguments } from '@babel/types';\r\n\r\nclass Counter extends Component {\r\n\r\n    // Define the initial state in a constructor\r\n    // state => counter 0\r\n\r\n    constructor() {\r\n        super(); // Error 1\r\n        this.state = {\r\n            counter: 0,\r\n            secondCounter: 100\r\n        }\r\n\r\n        // Arrow function prevents the need for binding, the binding happend automatically\r\n        // this.increment = this.increment.bind(this)\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"counter\">\r\n                <button onClick={this.increment}>+1</button>\r\n                <span className=\"count\"\r\n                    style= {{fontSize: \"50px\", padding: \"50px 50px\"}}>{this.state.counter}</span>\r\n                <span className=\"count\">{this.state.secondCounter}</span>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    increment = () => { // Update state\r\n        // console.log('increment');\r\n        this.setState({\r\n            counter: this.state.counter + 1,\r\n            secondCounter: this.state.secondCounter + 1\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default Counter"]},"metadata":{},"sourceType":"module"}