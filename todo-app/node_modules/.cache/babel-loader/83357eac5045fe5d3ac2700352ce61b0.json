{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticationService {\n  registerSuccessfulLogin(username, password) {\n    console.log('registerSuccessfulLogin');\n    sessionStorage.setItem('authenticatedUser', username);\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    axios.interceptors.request.use(config => {});\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:\\Users\\EPUFPAU\\Desktop\\todo-app\\src\\components\\todo\\AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfulLogin","username","password","console","log","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","setupAxiosInterceptors","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CL,QAA5C;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACLF,IAAAA,cAAc,CAACG,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,WAAOA,IAAP;AACH;;AAEDG,EAAAA,sBAAsB,GAAG;AACrBf,IAAAA,KAAK,CAACgB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY,CAAE,CADlB;AAGH;;AA1BuB;;AA6B5B,eAAe,IAAIlB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nclass AuthenticationService {\r\n    registerSuccessfulLogin(username, password) {\r\n        console.log('registerSuccessfulLogin');\r\n        sessionStorage.setItem('authenticatedUser', username);\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser');\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null) return false;\r\n        return true;\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors() {\r\n        axios.interceptors.request.use(\r\n            (config) => {}\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}