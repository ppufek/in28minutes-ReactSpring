{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  registerSuccessfulLogin(username, password) {\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    console.log('registerSuccessfulLogin');\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n\n    if (user === null) {\n      return '';\n    }\n\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    //adds authorization header on every request\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:\\Users\\EPUFPAU\\Desktop\\todo-app\\src\\components\\todo\\AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfulLogin","username","password","basicAuthHeader","window","btoa","console","log","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAExC,QAAIC,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYJ,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAI,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CR,QAA5C;AACA,SAAKS,sBAAL,CAA4BP,eAA5B;AACH;;AAEDQ,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACZ,WAAO,IAAP;AACV;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB;AACf,aAAO,EAAP;AACH;;AACD,WAAOA,IAAP;AACH;;AAEDJ,EAAAA,sBAAsB,CAACP,eAAD,EAAkB;AACpC;AACAL,IAAAA,KAAK,CAACmB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACvBO,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BnB,eAA/B;AACH;;AACD,aAAOiB,MAAP;AACH,KANL;AAQH;;AAtCuB;;AAyC5B,eAAe,IAAIrB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\n\r\nclass AuthenticationService {\r\n    registerSuccessfulLogin(username, password) {\r\n\r\n        let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password)\r\n\r\n        console.log('registerSuccessfulLogin')\r\n        sessionStorage.setItem('authenticatedUser', username)\r\n        this.setupAxiosInterceptors(basicAuthHeader)\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser');\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if (user === null) return false;\r\n               return true;\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if (user === null) {\r\n            return ''\r\n        }\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(basicAuthHeader) {\r\n        //adds authorization header on every request\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}